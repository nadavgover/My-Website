{"version":3,"file":"static/js/952.2429884c.chunk.js","mappings":"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","sources":["chess-calculator-old-project/client/redux/oneVsOne/oneVsOne.actions.js","chess-calculator-old-project/client/components/oneVsOne/OneVsOneResultList.jsx","chess-calculator-old-project/client/components/oneVsOne/OneVsOne.jsx","chess-calculator-old-project/client/components/OneVsOneApp.jsx","chess-calculator-old-project/client/components/navigation/NavBar.jsx","chess-calculator-old-project/client/components/sharedComponents/Result.jsx","chess-calculator-old-project/client/components/sharedComponents/ResultIcon.jsx","chess-calculator-old-project/client/constants/colors.js","chess-calculator-old-project/client/constants/inputs.js","chess-calculator-old-project/client/constants/rating.js","chess-calculator-old-project/client/constants/redux.js","chess-calculator-old-project/client/redux/batch/batch.types.js","chess-calculator-old-project/client/redux/oneVsOne/oneVsOne.types.js","chess-calculator-old-project/client/redux/oneVsOne/oneVsOne.reducer.js","chess-calculator-old-project/client/redux/batch/batch.reducer.js","chess-calculator-old-project/client/redux/root.reducer.js","chess-calculator-old-project/client/redux/store.js","chess-calculator-old-project/client/services/rating.service.js","chess-calculator-old-project/client/services/utils.service.js","chess-calculator-old-project/client/services/validation.service.js"],"sourcesContent":["import {ONE_VS_ONE_ACTION_TYPES} from \"./oneVsOne.types\";\n\nexport const setOneVsOneFormData = payload => {\n    return {\n        type: ONE_VS_ONE_ACTION_TYPES.SET_ONE_VS_ONE_FORM_DATA,\n        payload: payload\n    }\n}\n\nexport const setRatingChange = payload => {\n    return {\n        type: ONE_VS_ONE_ACTION_TYPES.SET_RATING_CHANGE,\n        payload: payload\n    }\n}","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nimport {scores} from \"../../constants/rating\";\nimport {round, capitalizeFirstLetter} from \"../../services/utils.service\";\nimport {shallowEqual, useSelector} from \"react-redux\";\nimport Result from \"../sharedComponents/Result\";\nimport ResultIcon from \"../sharedComponents/ResultIcon\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    text: {\n        textAlign: \"center\"\n    }\n}));\n\nconst OneVsOneResultList = () => {\n    const classes = useStyles();\n    const ratingChange = useSelector(({oneVsOne: {ratingChange}}) => ratingChange, shallowEqual)\n    const [winResultRounded, tieResultRounded, lossResultRounded] = [ratingChange[scores.WIN.STR], ratingChange[scores.TIE.STR], ratingChange[scores.LOSS.STR]].map(rating => round(rating))\n\n    return (\n        <div>\n            <Typography variant=\"body1\" className={classes.text}>Rating Change</Typography>\n            <List className={classes.root}>\n                <ListItem>\n                    <ResultIcon score={scores.WIN.STR} list/>\n                    <ListItemText primary={capitalizeFirstLetter(scores.WIN.STR)}\n                                  secondary={<Result result={winResultRounded}/>}/>\n                </ListItem>\n                <ListItem>\n                    <ResultIcon score={scores.TIE.STR} list/>\n                    <ListItemText primary={capitalizeFirstLetter(scores.TIE.STR)}\n                                  secondary={<Result result={tieResultRounded}/>}/>\n                </ListItem>\n                <ListItem>\n                    <ResultIcon score={scores.LOSS.STR} list/>\n                    <ListItemText primary={capitalizeFirstLetter(scores.LOSS.STR)}\n                                  secondary={<Result result={lossResultRounded}/>}/>\n                </ListItem>\n            </List>\n        </div>\n    );\n}\n\nexport default OneVsOneResultList","import React, {Fragment, useCallback, useState} from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport {shallowEqual, useDispatch, useSelector} from \"react-redux\";\n\nimport {INPUTS, ERROR_MSG} from \"../../constants/inputs\";\nimport {FORM_KEYS} from \"../../constants/redux\";\nimport {setOneVsOneFormData, setRatingChange} from '../../redux/oneVsOne/oneVsOne.actions'\nimport {isRatingValid, isTimeControlValid} from \"../../services/validation.service\";\nimport {calculateRatingChange} from \"../../services/rating.service\";\nimport {scores} from \"../../constants/rating\";\nimport OneVsOneResultList from \"./OneVsOneResultList\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(),\n            width: '25ch',\n            display: \"block\",\n        },\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    text: {\n        textAlign: \"center\",\n        marginTop: theme.spacing()\n    },\n    button: {\n        margin: theme.spacing(),\n        width: '25ch',\n        display: \"block\",\n    }\n}));\n\n\nconst OneVsOne = () => {\n    const classes = useStyles();\n    const formValues = useSelector(({oneVsOne: {form}}) => form, shallowEqual)\n    const isRatingChangeEmpty = useSelector(({oneVsOne: {ratingChange}}) => Object.keys(ratingChange).length === 0)\n    const dispatch = useDispatch()\n\n    const commonHandler = useCallback((isRatingChangeEmpty, formKey, e) => {\n        if(!isRatingChangeEmpty){\n            dispatch(setRatingChange({}))\n        }\n        dispatch(setOneVsOneFormData({\n            key: formKey,\n            value: e.target.value\n        }))\n    }, [])\n\n    const handleMyRatingChange = useCallback(e => {\n        commonHandler(isRatingChangeEmpty, FORM_KEYS.MY_RATING, e)\n    }, [isRatingChangeEmpty])\n\n    const handleOpponentRatingChange = useCallback(e => {\n        commonHandler(isRatingChangeEmpty, FORM_KEYS.OPPONENT_RATING, e)\n    }, [isRatingChangeEmpty])\n\n    const handleTimeControlChange = useCallback(e => {\n        commonHandler(isRatingChangeEmpty, FORM_KEYS.TIME_CONTROL, e)\n    }, [isRatingChangeEmpty])\n\n    const handleSubmit = useCallback(() => {\n        const myRating = formValues[FORM_KEYS.MY_RATING].trim()\n        const opponentRating = formValues[FORM_KEYS.OPPONENT_RATING].trim()\n        const timeControl = formValues[FORM_KEYS.TIME_CONTROL].trim()\n        const isValidMyRating = isRatingValid(myRating)\n        const isValidOpponentRating = isRatingValid(opponentRating)\n        const isValidTimeControl = isTimeControlValid(timeControl)\n        dispatch(setOneVsOneFormData({\n            key: FORM_KEYS.MY_RATING_VALID,\n            value: isValidMyRating\n        }))\n        dispatch(setOneVsOneFormData({\n            key: FORM_KEYS.OPPONENT_RATING_VALID,\n            value: isValidOpponentRating\n        }))\n        dispatch(setOneVsOneFormData({\n            key: FORM_KEYS.TIME_CONTROL_VALID,\n            value: isValidTimeControl\n        }))\n        if (isValidMyRating && isValidOpponentRating && isValidTimeControl) {\n            const [winRatingChange, tieRatingChange, lossRatingChange] = [scores.WIN.STR, scores.TIE.STR, scores.LOSS.STR].map(score => {\n                return calculateRatingChange(myRating, opponentRating, timeControl, score)\n            })\n            dispatch(setRatingChange({\n                [scores.WIN.STR]: winRatingChange,\n                [scores.TIE.STR]: tieRatingChange,\n                [scores.LOSS.STR]: lossRatingChange\n            }))\n\n        }\n    }, [formValues])\n\n    return (\n        <div>\n            <Typography variant=\"body1\" className={classes.text}>One Vs One Calculator</Typography>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField label={INPUTS.MY_RATING}\n                           value={formValues[FORM_KEYS.MY_RATING]}\n                           onChange={handleMyRatingChange}\n                           color=\"primary\"\n                           error={!formValues[FORM_KEYS.MY_RATING_VALID]}\n                           helperText={!formValues[FORM_KEYS.MY_RATING_VALID] && ERROR_MSG.RATING}\n                />\n                <TextField label={INPUTS.OPPONENT_RATING}\n                           value={formValues[FORM_KEYS.OPPONENT_RATING]}\n                           onChange={handleOpponentRatingChange}\n                           color=\"primary\"\n                           error={!formValues[FORM_KEYS.OPPONENT_RATING_VALID]}\n                           helperText={!formValues[FORM_KEYS.OPPONENT_RATING_VALID] && ERROR_MSG.RATING}\n                />\n                <TextField label={INPUTS.TIME_CONTROL}\n                           value={formValues[FORM_KEYS.TIME_CONTROL]}\n                           onChange={handleTimeControlChange}\n                           color=\"primary\"\n                           placeholder={INPUTS.TIME_CONTROL_PLACEHOLDER}\n                           error={!formValues[FORM_KEYS.TIME_CONTROL_VALID]}\n                           helperText={!formValues[FORM_KEYS.TIME_CONTROL_VALID] && ERROR_MSG.TIME_CONTROL}\n                />\n            </form>\n            <Button variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleSubmit}\n                    className={classes.button}\n            >\n                {INPUTS.SUBMIT}\n            </Button>\n            {!isRatingChangeEmpty &&\n            <Fragment>\n                <Divider variant=\"middle\" className={classes.divider}/>\n                <OneVsOneResultList />\n            </Fragment>\n            }\n        </div>\n    )\n}\n\nexport default OneVsOne","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport store from \"../redux/store\";\nimport NavBar from \"./navigation/NavBar\";\nimport OneVsOne from \"./oneVsOne/OneVsOne\";\n\nconst OneVsOneApp = () => {\n  return (\n    <Provider store={store}>\n      <div>\n        <NavBar/>\n        <OneVsOne/>\n      </div>\n    </Provider>\n  )\n};\n\nexport default OneVsOneApp;","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport {routes} from \"../../constants/routes\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    link: {\n        textDecoration: \"none\",\n        color: \"black\"\n    }\n}));\n\nconst NavBar = () => {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = !!anchorEl;\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\"\n                                className={classes.menuButton}\n                                color=\"inherit\"\n                                aria-label=\"menu\"\n                                onClick={handleMenu}>\n                        <MoreVertIcon/>\n                    </IconButton>\n                    <Menu\n                        id=\"menu-appbar\"\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        keepMounted\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        open={open}\n                        onClose={handleClose}\n                    >\n                        <Link to={routes.ONE_VS_ONE} className={classes.link}>\n                            <MenuItem onClick={handleClose}>1 vs 1</MenuItem>\n                        </Link>\n                        <Link to={routes.BATCH} className={classes.link}>\n                            <MenuItem onClick={handleClose}>Batch</MenuItem>\n                        </Link>\n                    </Menu>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Chess Rating Calculator\n                    </Typography>\n\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nexport default NavBar","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\n\nimport {WIN_COLOR, LOSS_COLOR, TIE_COLOR} from \"../../constants/colors\";\nimport {scores} from \"../../constants/rating\";\n\nconst useStyles = makeStyles((theme) => ({\n    win: {\n        color: WIN_COLOR\n    },\n    loss: {\n        color: LOSS_COLOR\n    },\n    tie: {\n        color: TIE_COLOR\n    }\n}))\n\n\n\nconst Result = ({result}) => {\n    const classes = useStyles()\n    const resultClassName = result >= 0\n        ?\n        result > 0 ?\n            scores.WIN.STR\n            :\n            scores.TIE.STR\n        :\n        scores.LOSS.STR\n    const resultWithSign = result >= 0 ? `+${result}` : result\n    return(\n        <span className={classes[resultClassName]}>\n            {resultWithSign}\n        </span>\n    )\n}\n\nexport default Result","import React from 'react';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbsUpDownIcon from '@material-ui/icons/ThumbsUpDown';\n\nimport {scores} from \"../../constants/rating\";\n\nconst ResultIcon = ({score, list = false, color = \"primary\"}) => {\n    const iconObj = {\n        [scores.WIN.STR]: <ThumbUpIcon color={color} />,\n        [scores.TIE.STR]: <ThumbsUpDownIcon color={color} />,\n        [scores.LOSS.STR]: <ThumbDownIcon color={color} />\n    }\n    const icon = iconObj[score]\n    return list ?\n        <ListItemAvatar>\n            <Avatar>\n                {icon}\n            </Avatar>\n        </ListItemAvatar>\n        :\n        icon\n}\n\nexport default ResultIcon","export const WIN_COLOR = \"#629924\"\nexport const TIE_COLOR = \"#D59020\"\nexport const LOSS_COLOR = \"#CC3333\"\n","export const INPUTS = {\n    MY_RATING: \"My rating\",\n    OPPONENT_RATING: \"Opponent's rating\",\n    TIME_CONTROL: \"Time Control\",\n    TIME_CONTROL_PLACEHOLDER: \"Example: 50+10\",\n    SUBMIT: \"Submit\",\n    ADD: \"Add game\"\n}\n\nexport const ERROR_MSG = {\n    RATING: \"Rating must be a 4 digit number greater than 1200\",\n    TIME_CONTROL: \"Time control should be in format of a minutes+seconds and the sum of minutes plus seconds should be greater than 20. Example: 50+10\"\n}","export const scores = {\n    WIN: {\n        STR: \"win\",\n        NUM: 1},\n    TIE: {\n        STR: \"tie\",\n        NUM: 0.5\n    },\n    LOSS: {\n        STR: \"loss\",\n        NUM: 0\n    }\n}\n\nexport const ratingDifferenceLimits = {\n    UPPER: {\n        LIMIT: 750,\n        D: 400},\n    LOWER: {\n        LIMIT: 375,\n        D: 375\n    }\n}\n\nexport const timeControls = {\n    CLASSICAL: \"classical\",\n    MIDDLE: \"middle\",\n    RAPID: \"rapid\",\n    SEPARATOR: \"+\",\n    MINUTES_IN_60_MOVES: {\n        CLASSICAL: 120,\n        MIDDLE: 60,\n        RAPID: 20\n    }\n}\n\nexport const bonus = {\n    LIMIT: 2300,\n    NO_BONUS: 0,\n    DIVIDERS: {\n        CLASSICAL: 2000,\n        REST: 4000\n    }\n}\n\nexport const KLimits = {\n    MAX: {\n        LIMIT: 2200,\n        CLASSICAL: 10,\n        MIDDLE: 6,\n        RAPID: 3\n    },\n    HIGH: {\n        LIMIT: 1750,\n        CLASSICAL: 12,\n        MIDDLE: 8,\n        RAPID: 5\n    },\n    LOW: {\n        LIMIT: 1550,\n        CLASSICAL: 14,\n        MIDDLE: 10,\n        RAPID: 7\n    },\n    MIN: {\n        LIMIT: 1200,\n        CLASSICAL: 14,\n        MIDDLE: 11,\n        RAPID: 8\n    }\n}\n\nexport const changeCoefficients = {\n    DIVIDER: 400,\n    MULTIPLIER: 2,\n    SUBTRACT: 1\n}","export const FORM_KEYS = {\n    MY_RATING: \"myRating\",\n    MY_RATING_VALID: \"myRatingValid\",\n    OPPONENT_RATING: \"opponentRating\",\n    OPPONENT_RATING_VALID: \"opponentRatingValid\",\n    TIME_CONTROL: \"timeControl\",\n    TIME_CONTROL_VALID: \"timeControlValid\",\n    RATING_CHANGE: \"ratingChange\"\n}\n","export const BATCH_ACTION_TYPES = {\n    SET_BATCH_FORM_DATA: \"SET_BATCH_FORM_DATA\",\n    SET_TOTAL_RATING_CHANGE: \"SET_TOTAL_RATING_CHANGE\",\n    RESET_ALL_RATING_CHANGES: \"RESET_ALL_RATING_CHANGES\",\n    SET_GAME_DATA: \"SET_GAME_DATA\",\n    ADD_GAME: \"ADD_GAME\",\n    REMOVE_GAME: \"REMOVE_GAME\"\n}","export const ONE_VS_ONE_ACTION_TYPES = {\n    SET_ONE_VS_ONE_FORM_DATA: 'SET_ONE_VS_ONE_FORM_DATA',\n    SET_RATING_CHANGE: 'SET_RATING_CHANGE'\n}","import {ONE_VS_ONE_ACTION_TYPES} from \"./oneVsOne.types\";\nimport {FORM_KEYS} from \"../../constants/redux\";\n\nconst initialState = {\n    form: {\n        [FORM_KEYS.MY_RATING]: \"\",\n        [FORM_KEYS.MY_RATING_VALID]: true,\n        [FORM_KEYS.OPPONENT_RATING]: \"\",\n        [FORM_KEYS.OPPONENT_RATING_VALID]: true,\n        [FORM_KEYS.TIME_CONTROL]: \"\",\n        [FORM_KEYS.TIME_CONTROL_VALID]: true\n    },\n    ratingChange: {}\n}\n\nconst oneVsOneReducer = (state = initialState, {type: actionType, payload = {}}) => {\n    const actionHandler = {\n        [ONE_VS_ONE_ACTION_TYPES.SET_ONE_VS_ONE_FORM_DATA]: {\n            ...state,\n            form: {\n                ...state.form,\n                [payload.key]: payload.value\n            }\n        },\n        [ONE_VS_ONE_ACTION_TYPES.SET_RATING_CHANGE]: {\n            ...state,\n            ratingChange: payload\n        }\n    }\n    return actionHandler[actionType] || state\n}\n\nexport default oneVsOneReducer","import {BATCH_ACTION_TYPES} from \"./batch.types\";\nimport {FORM_KEYS} from \"../../constants/redux\";\nimport {scores} from \"../../constants/rating\";\nimport {generateUuid} from \"../../services/utils.service\";\n\n\nconst createNewGameCard = () => ({\n    score: scores.WIN.STR,\n    [FORM_KEYS.OPPONENT_RATING]: \"\",\n    [FORM_KEYS.OPPONENT_RATING_VALID]: true,\n    [FORM_KEYS.RATING_CHANGE]: NaN,\n    reactKey: generateUuid()\n})\n\nconst initialState = {\n    form: {\n        [FORM_KEYS.MY_RATING]: \"\",\n        [FORM_KEYS.MY_RATING_VALID]: true,\n        [FORM_KEYS.TIME_CONTROL]: \"\",\n        [FORM_KEYS.TIME_CONTROL_VALID]: true\n    },\n    gameCards: [\n        createNewGameCard(),\n        createNewGameCard()\n    ],\n    totalRatingChange: NaN\n}\n\nconst batchReducer = (state = initialState, {type: actionType, payload = {}}) => {\n    const actionHandler = {\n        [BATCH_ACTION_TYPES.SET_BATCH_FORM_DATA]: {\n            ...state,\n            form: {\n                ...state.form,\n                [payload.key]: payload.value\n            }\n        },\n        [BATCH_ACTION_TYPES.SET_TOTAL_RATING_CHANGE]: {\n            ...state,\n            totalRatingChange: payload\n        },\n        [BATCH_ACTION_TYPES.RESET_ALL_RATING_CHANGES]: {\n            ...state,\n            gameCards: state.gameCards.map(card => {\n                return {...card, ratingChange: NaN}\n            }),\n            totalRatingChange: NaN\n        },\n        [BATCH_ACTION_TYPES.SET_GAME_DATA]: {\n            ...state,\n            gameCards: state.gameCards.map((card, i) => {\n                return i === payload.gameNumber ?\n                    {\n                        ...card,\n                        [payload.key]: payload.value\n                    }\n                    :\n                    card\n            })\n        },\n        [BATCH_ACTION_TYPES.ADD_GAME]: {\n            ...state,\n            gameCards: [...state.gameCards, createNewGameCard()]\n        },\n        [BATCH_ACTION_TYPES.REMOVE_GAME]: {\n            ...state,\n            gameCards: state.gameCards.filter((_, i) => i !== payload.gameNumber)\n        }\n    }\n    return actionHandler[actionType] || state\n}\n\nexport default batchReducer","import {combineReducers} from \"redux\";\nimport oneVsOneReducer from \"./oneVsOne/oneVsOne.reducer\";\nimport batchReducer from \"./batch/batch.reducer\";\n\nconst rootReducer = combineReducers({\n    oneVsOne: oneVsOneReducer,\n    batch: batchReducer\n})\n\nexport default rootReducer","import {createStore, applyMiddleware, compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./root.reducer\";\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk)))\n\nexport default store","import {scores, ratingDifferenceLimits, timeControls, bonus, KLimits, changeCoefficients} from '../constants/rating'\n\nconst getScore = score => {\n    return typeof score === \"string\" ?\n        scores[score.toUpperCase()].NUM\n        :\n        score\n}\n\n/*\n* difference (D) between player 2 rating and player 1 rating (player 2 - player 1)\n* if the difference is greater than 375 and less than 750, then D = 375\n* if the difference is greater than 750, then D = 400\n* same thing for negative D\n* */\nconst calculateDifference = (player1Rating, player2Rating) => {\n    let d = player2Rating - player1Rating\n    if (d > ratingDifferenceLimits.UPPER.LIMIT) {\n        d = ratingDifferenceLimits.UPPER.D\n    } else if (d > ratingDifferenceLimits.LOWER.LIMIT && d < ratingDifferenceLimits.UPPER.LIMIT){\n        d = ratingDifferenceLimits.LOWER.D\n    }\n\n    if (d < -ratingDifferenceLimits.UPPER.LIMIT){\n        d = -ratingDifferenceLimits.UPPER.D\n    } else if (d > -ratingDifferenceLimits.UPPER.LIMIT && d < -ratingDifferenceLimits.LOWER.LIMIT){\n        d = -ratingDifferenceLimits.LOWER.D\n    }\n    return d\n}\n\n/*\n* bonus (B) for coming to the game (small number)\n* if the player's rating is greater then or equal to 2300 then B = 0\n* else, if the time control is classical then B = (2300 - player1Rating) / 2000\n*       else B = (2300 - player1Rating) / 4000\n*/\nconst calculateBonus = (player1Rating, timeControl) => {\n    let b\n    if (player1Rating >= bonus.LIMIT){\n        b = bonus.NO_BONUS\n    } else {\n        if (timeControl.toLowerCase() === timeControls.CLASSICAL){\n            b = (bonus.LIMIT - player1Rating) / bonus.DIVIDERS.CLASSICAL\n        } else {\n            b = (bonus.LIMIT - player1Rating) / bonus.DIVIDERS.REST\n        }\n    }\n\n    return b\n}\n\n/*\n* Get coefficient (K) of the player by the following table:\n*   |           |classical|middle|rapid|\n*   |2200 and up|    10   |   6  |  3  |\n*   | 1750-2199 |    12   |   8  |  5  |\n*   | 1550-1749 |    14   |  10  |  7  |\n*   | 1200-1549 |    14   |  11  |  8  |\n* */\nconst getCoefficientK = (player1Rating, timeControl) => {\n    let k\n    const timeControlUpper = timeControl.toUpperCase()\n    if(player1Rating >= KLimits.MAX.LIMIT){\n        k = KLimits.MAX[timeControlUpper]\n    } else if (player1Rating >= KLimits.HIGH.LIMIT && player1Rating < KLimits.MAX.LIMIT){\n        k = KLimits.HIGH[timeControlUpper]\n    } else if (player1Rating >= KLimits.LOW.LIMIT && player1Rating < KLimits.HIGH.LIMIT){\n        k = KLimits.LOW[timeControlUpper]\n    } else {\n        k = KLimits.MIN[timeControlUpper]\n    }\n    return k\n}\n\n/*\n* Sanitize the time control\n* input can be time separated by + where the left is minutes and right is increment in seconds, for example 15+5\n* input can also be a string in ['classical', 'middle', 'rapid']\n* time control us calculated as follows:\n*   classical - at least 120 minutes per player for the first 60 moves (for example 90+30)\n*   middle - at least 60 minutes per player for the first 60 moves, but less than 120 minutes (for example 50+10)\n*   rapid - at least 20 minutes per player for the first 60 moves, but less than 60 minutes (for example 15+5)\n*/\nconst sanitizeTimeControl = timeControl => {\n    let [minutes, seconds] = timeControl.split(timeControls.SEPARATOR)\n    minutes = Number(minutes)\n    seconds = Number(seconds)\n    if (Number.isNaN(minutes) || Number.isNaN(seconds)){\n        // Assuming valid input\n        return timeControl\n    }\n    const totalMinutesIn60Moves = minutes + seconds\n    if (totalMinutesIn60Moves >= timeControls.MINUTES_IN_60_MOVES.CLASSICAL){\n        return timeControls.CLASSICAL\n    } else if (totalMinutesIn60Moves >= timeControls.MINUTES_IN_60_MOVES.MIDDLE){\n        return timeControls.MIDDLE\n    } else if (totalMinutesIn60Moves >= timeControls.MINUTES_IN_60_MOVES.RAPID){\n        return timeControls.RAPID\n    } else {\n        console.log(\"Time control of less than 20 minutes per player for the first 60 moves is unsupported\")\n    }\n}\n\n/*\n* Calculate the change of rating of player 1\n* Formula for calculating the change:\n* Change = (K * (P * 2) - 1)) + (K * D / 400) + B\n* Where: P = 0 or 0.5 or 1 (the score of player 1 in the game)\n*        D = difference between player 2 rating and player 1 rating (player2 - player1)\n*            if the difference is greater than 375 and less than 750, then D = 375\n*            if the difference is greater than 750, then D = 400\n*            same thing for negative D\n*        B = bonus for coming to the game (small number)\n*            if the player's rating is greater then or equal to 2300 then B = 0\n*            else, if the time control is classical then B = (2300 - player1Rating) / 2000\n*            else B = (2300 - player1Rating) / 4000\n*        K = coefficient determined by the table:\n*            |           |classical|middle|rapid|\n*            |2200 and up|    10   |   6  |  3  |\n*            | 1750-2199 |    12   |   8  |  5  |\n*            | 1550-1749 |    14   |  10  |  7  |\n*            | 1200-1549 |    14   |  11  |  8  |\n*/\nexport const calculateRatingChange = (player1Rating, player2Rating, timeControl, score) => {\n    const timeControlSanitized = sanitizeTimeControl(timeControl)\n    const p = getScore(score)\n    const d = calculateDifference(player1Rating, player2Rating)\n    const b = calculateBonus(player1Rating, timeControlSanitized)\n    const k = getCoefficientK(player1Rating, timeControlSanitized)\n    return (k * ((p * changeCoefficients.MULTIPLIER) - changeCoefficients.SUBTRACT)) + (k * d / changeCoefficients.DIVIDER) + b\n}","import { v4 as uuidv4 } from 'uuid';\n\nexport const capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\nexport const round = (rating, precision = 1) => {\n    const multiplier = Math.pow(10, precision)\n    return Math.round(rating * multiplier) / multiplier\n}\n\nexport const generateUuid = () => {\n    return uuidv4()\n}","const regexValues = {\n    VALID_RATING: /^(1[2-9]|[2-9]\\d)\\d\\d$/,\n    VALID_TIME_CONTROL: /^[1-9]\\d*\\s*\\+\\s*\\d+$/\n}\n\nexport const isRatingValid = value => {\n    return !!value.match(regexValues.VALID_RATING)\n}\n\nexport const isTimeControlValid = value => {\n    return !!value.match(regexValues.VALID_TIME_CONTROL)\n}"],"names":["setOneVsOneFormData","payload","type","ONE_VS_ONE_ACTION_TYPES","setRatingChange","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","text","textAlign","classes","ratingChange","useSelector","oneVsOne","shallowEqual","scores","map","rating","round","winResultRounded","tieResultRounded","lossResultRounded","Typography","variant","className","List","ListItem","ResultIcon","score","list","ListItemText","primary","capitalizeFirstLetter","secondary","Result","result","margin","spacing","display","divider","marginTop","marginBottom","button","formValues","form","isRatingChangeEmpty","Object","keys","length","dispatch","useDispatch","commonHandler","useCallback","formKey","e","key","value","target","handleMyRatingChange","FORM_KEYS","handleOpponentRatingChange","handleTimeControlChange","handleSubmit","myRating","trim","opponentRating","timeControl","isValidMyRating","isRatingValid","isValidOpponentRating","isValidTimeControl","isTimeControlValid","calculateRatingChange","winRatingChange","tieRatingChange","lossRatingChange","noValidate","autoComplete","TextField","label","INPUTS","onChange","color","error","helperText","ERROR_MSG","placeholder","Button","onClick","Fragment","Divider","store","NavBar","flexGrow","menuButton","marginRight","title","link","textDecoration","React","anchorEl","setAnchorEl","open","handleClose","position","edge","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","to","routes","win","WIN_COLOR","loss","LOSS_COLOR","tie","TIE_COLOR","resultClassName","resultWithSign","icon","MY_RATING","OPPONENT_RATING","TIME_CONTROL","TIME_CONTROL_PLACEHOLDER","SUBMIT","ADD","RATING","WIN","STR","NUM","TIE","LOSS","ratingDifferenceLimits","UPPER","LIMIT","D","LOWER","timeControls","CLASSICAL","MIDDLE","RAPID","SEPARATOR","MINUTES_IN_60_MOVES","bonus","NO_BONUS","DIVIDERS","REST","KLimits","MAX","HIGH","LOW","MIN","changeCoefficients","DIVIDER","MULTIPLIER","SUBTRACT","MY_RATING_VALID","OPPONENT_RATING_VALID","TIME_CONTROL_VALID","RATING_CHANGE","BATCH_ACTION_TYPES","SET_BATCH_FORM_DATA","SET_TOTAL_RATING_CHANGE","RESET_ALL_RATING_CHANGES","SET_GAME_DATA","ADD_GAME","REMOVE_GAME","SET_ONE_VS_ONE_FORM_DATA","SET_RATING_CHANGE","initialState","state","actionType","actionHandler","createNewGameCard","NaN","generateUuid","gameCards","totalRatingChange","card","i","gameNumber","filter","_","combineReducers","oneVsOneReducer","batch","batchReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","player1Rating","player2Rating","timeControlSanitized","split","minutes","seconds","Number","isNaN","totalMinutesIn60Moves","console","log","sanitizeTimeControl","p","toUpperCase","getScore","d","calculateDifference","b","toLowerCase","calculateBonus","k","timeControlUpper","getCoefficientK","string","charAt","slice","precision","multiplier","Math","pow","uuidv4","regexValues","match"],"sourceRoot":""}